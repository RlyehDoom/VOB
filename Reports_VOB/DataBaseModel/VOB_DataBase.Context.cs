//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VOB.Web.DataBaseModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class VOB_Entitites : DbContext
    {
        public VOB_Entitites()
            : base("name=VOB_Entitites")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Analistas> Analistas { get; set; }
        public DbSet<BalanceDetalle> BalanceDetalle { get; set; }
        public DbSet<BalancePeriodo> BalancePeriodo { get; set; }
        public DbSet<Balances> Balances { get; set; }
        public DbSet<Clientes> Clientes { get; set; }
        public DbSet<Conceptos> Conceptos { get; set; }
        public DbSet<ConceptosGrupos> ConceptosGrupos { get; set; }
        public DbSet<Estados> Estados { get; set; }
        public DbSet<Monedas> Monedas { get; set; }
        public DbSet<TipoBalance> TipoBalance { get; set; }
        public DbSet<TipoCalidad> TipoCalidad { get; set; }
        public DbSet<TipoConceptos> TipoConceptos { get; set; }
        public DbSet<TipoGrupos> TipoGrupos { get; set; }
    
        public virtual ObjectResult<CalcularBalanceCombinadoPorPeriodo_Result> CalcularBalanceCombinadoPorPeriodo(string listaRUTs, string listaIdPeriodos)
        {
            var listaRUTsParameter = listaRUTs != null ?
                new ObjectParameter("ListaRUTs", listaRUTs) :
                new ObjectParameter("ListaRUTs", typeof(string));
    
            var listaIdPeriodosParameter = listaIdPeriodos != null ?
                new ObjectParameter("ListaIdPeriodos", listaIdPeriodos) :
                new ObjectParameter("ListaIdPeriodos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalcularBalanceCombinadoPorPeriodo_Result>("CalcularBalanceCombinadoPorPeriodo", listaRUTsParameter, listaIdPeriodosParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertarEditarAnalista(Nullable<int> idAnalista, string nombreCompleto, string usuarioNT)
        {
            var idAnalistaParameter = idAnalista.HasValue ?
                new ObjectParameter("IdAnalista", idAnalista) :
                new ObjectParameter("IdAnalista", typeof(int));
    
            var nombreCompletoParameter = nombreCompleto != null ?
                new ObjectParameter("NombreCompleto", nombreCompleto) :
                new ObjectParameter("NombreCompleto", typeof(string));
    
            var usuarioNTParameter = usuarioNT != null ?
                new ObjectParameter("UsuarioNT", usuarioNT) :
                new ObjectParameter("UsuarioNT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertarEditarAnalista", idAnalistaParameter, nombreCompletoParameter, usuarioNTParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertarEditarBalance(Nullable<int> idBalance, Nullable<int> idCliente, Nullable<byte> idMoneda, Nullable<byte> idTipoBalance, string formatoMoneda, string ejecutivo, Nullable<System.DateTime> fecha, string usuario)
        {
            var idBalanceParameter = idBalance.HasValue ?
                new ObjectParameter("IdBalance", idBalance) :
                new ObjectParameter("IdBalance", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idMonedaParameter = idMoneda.HasValue ?
                new ObjectParameter("IdMoneda", idMoneda) :
                new ObjectParameter("IdMoneda", typeof(byte));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            var formatoMonedaParameter = formatoMoneda != null ?
                new ObjectParameter("FormatoMoneda", formatoMoneda) :
                new ObjectParameter("FormatoMoneda", typeof(string));
    
            var ejecutivoParameter = ejecutivo != null ?
                new ObjectParameter("Ejecutivo", ejecutivo) :
                new ObjectParameter("Ejecutivo", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertarEditarBalance", idBalanceParameter, idClienteParameter, idMonedaParameter, idTipoBalanceParameter, formatoMonedaParameter, ejecutivoParameter, fechaParameter, usuarioParameter);
        }
    
        public virtual int InsertarEditarBalanceDetalle(Nullable<System.DateTime> fechaHora, string usuarioNT)
        {
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("FechaHora", fechaHora) :
                new ObjectParameter("FechaHora", typeof(System.DateTime));
    
            var usuarioNTParameter = usuarioNT != null ?
                new ObjectParameter("UsuarioNT", usuarioNT) :
                new ObjectParameter("UsuarioNT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarEditarBalanceDetalle", fechaHoraParameter, usuarioNTParameter);
        }
    
        public virtual int InsertarEditarBalanceDetallePorConcepto(Nullable<int> idConcepto, Nullable<int> idPeriodo, Nullable<int> fechaCierre, Nullable<double> monto, string descripcion, Nullable<System.DateTime> fechaHora, string usuarioNT, string nota)
        {
            var idConceptoParameter = idConcepto.HasValue ?
                new ObjectParameter("IdConcepto", idConcepto) :
                new ObjectParameter("IdConcepto", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var fechaCierreParameter = fechaCierre.HasValue ?
                new ObjectParameter("FechaCierre", fechaCierre) :
                new ObjectParameter("FechaCierre", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(double));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("FechaHora", fechaHora) :
                new ObjectParameter("FechaHora", typeof(System.DateTime));
    
            var usuarioNTParameter = usuarioNT != null ?
                new ObjectParameter("UsuarioNT", usuarioNT) :
                new ObjectParameter("UsuarioNT", typeof(string));
    
            var notaParameter = nota != null ?
                new ObjectParameter("Nota", nota) :
                new ObjectParameter("Nota", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarEditarBalanceDetallePorConcepto", idConceptoParameter, idPeriodoParameter, fechaCierreParameter, montoParameter, descripcionParameter, fechaHoraParameter, usuarioNTParameter, notaParameter);
        }
    
        public virtual int InsertarEditarBalanceDetalleXML(string fecha, string usuarioNT, string detalles)
        {
            var fechaParameter = fecha != null ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(string));
    
            var usuarioNTParameter = usuarioNT != null ?
                new ObjectParameter("UsuarioNT", usuarioNT) :
                new ObjectParameter("UsuarioNT", typeof(string));
    
            var detallesParameter = detalles != null ?
                new ObjectParameter("Detalles", detalles) :
                new ObjectParameter("Detalles", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarEditarBalanceDetalleXML", fechaParameter, usuarioNTParameter, detallesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertarEditarBalancePeriodo(Nullable<int> idPeriodo, Nullable<int> idBalance, Nullable<int> periodo, Nullable<byte> meses, Nullable<short> cantidadEmpresas, string clientes, Nullable<byte> idEstado, Nullable<byte> idCalidad, Nullable<int> idAnalista, string fechaBalance, string ultimoUsuario)
        {
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idBalanceParameter = idBalance.HasValue ?
                new ObjectParameter("IdBalance", idBalance) :
                new ObjectParameter("IdBalance", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var mesesParameter = meses.HasValue ?
                new ObjectParameter("Meses", meses) :
                new ObjectParameter("Meses", typeof(byte));
    
            var cantidadEmpresasParameter = cantidadEmpresas.HasValue ?
                new ObjectParameter("CantidadEmpresas", cantidadEmpresas) :
                new ObjectParameter("CantidadEmpresas", typeof(short));
    
            var clientesParameter = clientes != null ?
                new ObjectParameter("Clientes", clientes) :
                new ObjectParameter("Clientes", typeof(string));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            var idCalidadParameter = idCalidad.HasValue ?
                new ObjectParameter("IdCalidad", idCalidad) :
                new ObjectParameter("IdCalidad", typeof(byte));
    
            var idAnalistaParameter = idAnalista.HasValue ?
                new ObjectParameter("IdAnalista", idAnalista) :
                new ObjectParameter("IdAnalista", typeof(int));
    
            var fechaBalanceParameter = fechaBalance != null ?
                new ObjectParameter("FechaBalance", fechaBalance) :
                new ObjectParameter("FechaBalance", typeof(string));
    
            var ultimoUsuarioParameter = ultimoUsuario != null ?
                new ObjectParameter("UltimoUsuario", ultimoUsuario) :
                new ObjectParameter("UltimoUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertarEditarBalancePeriodo", idPeriodoParameter, idBalanceParameter, periodoParameter, mesesParameter, cantidadEmpresasParameter, clientesParameter, idEstadoParameter, idCalidadParameter, idAnalistaParameter, fechaBalanceParameter, ultimoUsuarioParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertarEditarCliente(Nullable<int> idCliente, Nullable<int> idClienteBanco, string rUTCliente, string nombreCompleto, string razonSocial, string giro, Nullable<int> codActivo, string segmento, string cRD, string vE, Nullable<System.DateTime> clienteDesde, string usuarioNT)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idClienteBancoParameter = idClienteBanco.HasValue ?
                new ObjectParameter("IdClienteBanco", idClienteBanco) :
                new ObjectParameter("IdClienteBanco", typeof(int));
    
            var rUTClienteParameter = rUTCliente != null ?
                new ObjectParameter("RUTCliente", rUTCliente) :
                new ObjectParameter("RUTCliente", typeof(string));
    
            var nombreCompletoParameter = nombreCompleto != null ?
                new ObjectParameter("NombreCompleto", nombreCompleto) :
                new ObjectParameter("NombreCompleto", typeof(string));
    
            var razonSocialParameter = razonSocial != null ?
                new ObjectParameter("RazonSocial", razonSocial) :
                new ObjectParameter("RazonSocial", typeof(string));
    
            var giroParameter = giro != null ?
                new ObjectParameter("Giro", giro) :
                new ObjectParameter("Giro", typeof(string));
    
            var codActivoParameter = codActivo.HasValue ?
                new ObjectParameter("CodActivo", codActivo) :
                new ObjectParameter("CodActivo", typeof(int));
    
            var segmentoParameter = segmento != null ?
                new ObjectParameter("Segmento", segmento) :
                new ObjectParameter("Segmento", typeof(string));
    
            var cRDParameter = cRD != null ?
                new ObjectParameter("CRD", cRD) :
                new ObjectParameter("CRD", typeof(string));
    
            var vEParameter = vE != null ?
                new ObjectParameter("VE", vE) :
                new ObjectParameter("VE", typeof(string));
    
            var clienteDesdeParameter = clienteDesde.HasValue ?
                new ObjectParameter("ClienteDesde", clienteDesde) :
                new ObjectParameter("ClienteDesde", typeof(System.DateTime));
    
            var usuarioNTParameter = usuarioNT != null ?
                new ObjectParameter("UsuarioNT", usuarioNT) :
                new ObjectParameter("UsuarioNT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertarEditarCliente", idClienteParameter, idClienteBancoParameter, rUTClienteParameter, nombreCompletoParameter, razonSocialParameter, giroParameter, codActivoParameter, segmentoParameter, cRDParameter, vEParameter, clienteDesdeParameter, usuarioNTParameter);
        }
    
        public virtual int InsertarEditarEjecutivo(Nullable<int> idEjecutivo, string nombreCompleto, string usuarioNT)
        {
            var idEjecutivoParameter = idEjecutivo.HasValue ?
                new ObjectParameter("IdEjecutivo", idEjecutivo) :
                new ObjectParameter("IdEjecutivo", typeof(int));
    
            var nombreCompletoParameter = nombreCompleto != null ?
                new ObjectParameter("NombreCompleto", nombreCompleto) :
                new ObjectParameter("NombreCompleto", typeof(string));
    
            var usuarioNTParameter = usuarioNT != null ?
                new ObjectParameter("UsuarioNT", usuarioNT) :
                new ObjectParameter("UsuarioNT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarEditarEjecutivo", idEjecutivoParameter, nombreCompletoParameter, usuarioNTParameter);
        }
    
        public virtual ObjectResult<ObtenerBalancesClientes_Result> ObtenerBalancesClientes(Nullable<int> idCliente, string rUTCliente, Nullable<byte> idTipoBalance)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var rUTClienteParameter = rUTCliente != null ?
                new ObjectParameter("RUTCliente", rUTCliente) :
                new ObjectParameter("RUTCliente", typeof(string));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerBalancesClientes_Result>("ObtenerBalancesClientes", idClienteParameter, rUTClienteParameter, idTipoBalanceParameter);
        }
    
        public virtual ObjectResult<ObtenerBalancesCombinadosPorPeriodo_Result> ObtenerBalancesCombinadosPorPeriodo(string rUTEmpresa, Nullable<int> periodo, Nullable<short> meses, Nullable<short> cantidadEmpresas, string listaRUTs)
        {
            var rUTEmpresaParameter = rUTEmpresa != null ?
                new ObjectParameter("RUTEmpresa", rUTEmpresa) :
                new ObjectParameter("RUTEmpresa", typeof(string));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var mesesParameter = meses.HasValue ?
                new ObjectParameter("Meses", meses) :
                new ObjectParameter("Meses", typeof(short));
    
            var cantidadEmpresasParameter = cantidadEmpresas.HasValue ?
                new ObjectParameter("CantidadEmpresas", cantidadEmpresas) :
                new ObjectParameter("CantidadEmpresas", typeof(short));
    
            var listaRUTsParameter = listaRUTs != null ?
                new ObjectParameter("ListaRUTs", listaRUTs) :
                new ObjectParameter("ListaRUTs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerBalancesCombinadosPorPeriodo_Result>("ObtenerBalancesCombinadosPorPeriodo", rUTEmpresaParameter, periodoParameter, mesesParameter, cantidadEmpresasParameter, listaRUTsParameter);
        }
    
        public virtual ObjectResult<ObtenerBalancesDetalles_Result> ObtenerBalancesDetalles(Nullable<int> idCliente, Nullable<byte> idTipoBalance, Nullable<int> idBalance, Nullable<int> idPeriodo, Nullable<int> idEstado, Nullable<int> idCalidad)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            var idBalanceParameter = idBalance.HasValue ?
                new ObjectParameter("IdBalance", idBalance) :
                new ObjectParameter("IdBalance", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(int));
    
            var idCalidadParameter = idCalidad.HasValue ?
                new ObjectParameter("IdCalidad", idCalidad) :
                new ObjectParameter("IdCalidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerBalancesDetalles_Result>("ObtenerBalancesDetalles", idClienteParameter, idTipoBalanceParameter, idBalanceParameter, idPeriodoParameter, idEstadoParameter, idCalidadParameter);
        }
    
        public virtual ObjectResult<ObtenerBalancesPeriodosCliente_Result> ObtenerBalancesPeriodosCliente(Nullable<int> idCliente, string rUTCliente, Nullable<int> idPeriodo, Nullable<int> periodo, Nullable<byte> idEstado, Nullable<byte> idCalidad, Nullable<byte> meses, Nullable<byte> idTipoBalance, Nullable<short> cantidadEmpresas)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var rUTClienteParameter = rUTCliente != null ?
                new ObjectParameter("RUTCliente", rUTCliente) :
                new ObjectParameter("RUTCliente", typeof(string));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            var idCalidadParameter = idCalidad.HasValue ?
                new ObjectParameter("IdCalidad", idCalidad) :
                new ObjectParameter("IdCalidad", typeof(byte));
    
            var mesesParameter = meses.HasValue ?
                new ObjectParameter("Meses", meses) :
                new ObjectParameter("Meses", typeof(byte));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            var cantidadEmpresasParameter = cantidadEmpresas.HasValue ?
                new ObjectParameter("CantidadEmpresas", cantidadEmpresas) :
                new ObjectParameter("CantidadEmpresas", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerBalancesPeriodosCliente_Result>("ObtenerBalancesPeriodosCliente", idClienteParameter, rUTClienteParameter, idPeriodoParameter, periodoParameter, idEstadoParameter, idCalidadParameter, mesesParameter, idTipoBalanceParameter, cantidadEmpresasParameter);
        }
    
        public virtual ObjectResult<ObtenerPeriodosIngresados_Result> ObtenerPeriodosIngresados(string periodo1, string periodo2, string periodo3, string periodo4, string listaRUTs, Nullable<byte> cantidadMeses1, Nullable<byte> cantidadMeses2, Nullable<byte> cantidadMeses3, Nullable<byte> cantidadMeses4, Nullable<byte> idEstado, Nullable<byte> idTipoBalance)
        {
            var periodo1Parameter = periodo1 != null ?
                new ObjectParameter("Periodo1", periodo1) :
                new ObjectParameter("Periodo1", typeof(string));
    
            var periodo2Parameter = periodo2 != null ?
                new ObjectParameter("Periodo2", periodo2) :
                new ObjectParameter("Periodo2", typeof(string));
    
            var periodo3Parameter = periodo3 != null ?
                new ObjectParameter("Periodo3", periodo3) :
                new ObjectParameter("Periodo3", typeof(string));
    
            var periodo4Parameter = periodo4 != null ?
                new ObjectParameter("Periodo4", periodo4) :
                new ObjectParameter("Periodo4", typeof(string));
    
            var listaRUTsParameter = listaRUTs != null ?
                new ObjectParameter("ListaRUTs", listaRUTs) :
                new ObjectParameter("ListaRUTs", typeof(string));
    
            var cantidadMeses1Parameter = cantidadMeses1.HasValue ?
                new ObjectParameter("CantidadMeses1", cantidadMeses1) :
                new ObjectParameter("CantidadMeses1", typeof(byte));
    
            var cantidadMeses2Parameter = cantidadMeses2.HasValue ?
                new ObjectParameter("CantidadMeses2", cantidadMeses2) :
                new ObjectParameter("CantidadMeses2", typeof(byte));
    
            var cantidadMeses3Parameter = cantidadMeses3.HasValue ?
                new ObjectParameter("CantidadMeses3", cantidadMeses3) :
                new ObjectParameter("CantidadMeses3", typeof(byte));
    
            var cantidadMeses4Parameter = cantidadMeses4.HasValue ?
                new ObjectParameter("CantidadMeses4", cantidadMeses4) :
                new ObjectParameter("CantidadMeses4", typeof(byte));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerPeriodosIngresados_Result>("ObtenerPeriodosIngresados", periodo1Parameter, periodo2Parameter, periodo3Parameter, periodo4Parameter, listaRUTsParameter, cantidadMeses1Parameter, cantidadMeses2Parameter, cantidadMeses3Parameter, cantidadMeses4Parameter, idEstadoParameter, idTipoBalanceParameter);
        }
    
        public virtual ObjectResult<ObtieneAnalistas_Result> ObtieneAnalistas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtieneAnalistas_Result>("ObtieneAnalistas");
        }
    
        public virtual ObjectResult<ObtieneClientePorIdRUT_Result> ObtieneClientePorIdRUT(Nullable<int> idCliente, string rUTCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var rUTClienteParameter = rUTCliente != null ?
                new ObjectParameter("RUTCliente", rUTCliente) :
                new ObjectParameter("RUTCliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtieneClientePorIdRUT_Result>("ObtieneClientePorIdRUT", idClienteParameter, rUTClienteParameter);
        }
    
        public virtual int ObtieneClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ObtieneClientes");
        }
    
        public virtual ObjectResult<ObtieneEstadosBalance_Result> ObtieneEstadosBalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtieneEstadosBalance_Result>("ObtieneEstadosBalance");
        }
    
        public virtual ObjectResult<ObtieneMonedas_Result> ObtieneMonedas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtieneMonedas_Result>("ObtieneMonedas");
        }
    
        public virtual ObjectResult<ObtieneTipoBalances_Result> ObtieneTipoBalances()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtieneTipoBalances_Result>("ObtieneTipoBalances");
        }
    
        public virtual ObjectResult<ObtieneTipoCalidad_Result> ObtieneTipoCalidad()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtieneTipoCalidad_Result>("ObtieneTipoCalidad");
        }
    
        public virtual ObjectResult<ObtieneTipoConceptos_Result> ObtieneTipoConceptos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtieneTipoConceptos_Result>("ObtieneTipoConceptos");
        }
    
        public virtual ObjectResult<ReporteBalanceDetalles_Result> ReporteBalanceDetalles(string rutCliente, string periodo, Nullable<byte> idCalidad, Nullable<byte> idEstado, Nullable<byte> idTipoBalance)
        {
            var rutClienteParameter = rutCliente != null ?
                new ObjectParameter("RutCliente", rutCliente) :
                new ObjectParameter("RutCliente", typeof(string));
    
            var periodoParameter = periodo != null ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(string));
    
            var idCalidadParameter = idCalidad.HasValue ?
                new ObjectParameter("IdCalidad", idCalidad) :
                new ObjectParameter("IdCalidad", typeof(byte));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteBalanceDetalles_Result>("ReporteBalanceDetalles", rutClienteParameter, periodoParameter, idCalidadParameter, idEstadoParameter, idTipoBalanceParameter);
        }
    
        public virtual ObjectResult<ReporteBalanceDetallesMultiples_Result> ReporteBalanceDetallesMultiples(string rutCliente, string periodo1, string periodo2, string periodo3, string periodo4, Nullable<byte> idCalidad, Nullable<byte> idEstado, Nullable<byte> idTipoBalance)
        {
            var rutClienteParameter = rutCliente != null ?
                new ObjectParameter("RutCliente", rutCliente) :
                new ObjectParameter("RutCliente", typeof(string));
    
            var periodo1Parameter = periodo1 != null ?
                new ObjectParameter("Periodo1", periodo1) :
                new ObjectParameter("Periodo1", typeof(string));
    
            var periodo2Parameter = periodo2 != null ?
                new ObjectParameter("Periodo2", periodo2) :
                new ObjectParameter("Periodo2", typeof(string));
    
            var periodo3Parameter = periodo3 != null ?
                new ObjectParameter("Periodo3", periodo3) :
                new ObjectParameter("Periodo3", typeof(string));
    
            var periodo4Parameter = periodo4 != null ?
                new ObjectParameter("Periodo4", periodo4) :
                new ObjectParameter("Periodo4", typeof(string));
    
            var idCalidadParameter = idCalidad.HasValue ?
                new ObjectParameter("IdCalidad", idCalidad) :
                new ObjectParameter("IdCalidad", typeof(byte));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteBalanceDetallesMultiples_Result>("ReporteBalanceDetallesMultiples", rutClienteParameter, periodo1Parameter, periodo2Parameter, periodo3Parameter, periodo4Parameter, idCalidadParameter, idEstadoParameter, idTipoBalanceParameter);
        }
    
        public virtual ObjectResult<ReporteBalanceIndividualCabecera_Result> ReporteBalanceIndividualCabecera(string rutCliente, Nullable<byte> idTipoBalance)
        {
            var rutClienteParameter = rutCliente != null ?
                new ObjectParameter("RutCliente", rutCliente) :
                new ObjectParameter("RutCliente", typeof(string));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteBalanceIndividualCabecera_Result>("ReporteBalanceIndividualCabecera", rutClienteParameter, idTipoBalanceParameter);
        }
    
        public virtual ObjectResult<ReporteBalanceIndividualPorPeriodoCabecera_Result> ReporteBalanceIndividualPorPeriodoCabecera(string rutCliente, string periodo, Nullable<byte> idCalidad, Nullable<byte> idEstado, Nullable<byte> idTipoBalance)
        {
            var rutClienteParameter = rutCliente != null ?
                new ObjectParameter("RutCliente", rutCliente) :
                new ObjectParameter("RutCliente", typeof(string));
    
            var periodoParameter = periodo != null ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(string));
    
            var idCalidadParameter = idCalidad.HasValue ?
                new ObjectParameter("IdCalidad", idCalidad) :
                new ObjectParameter("IdCalidad", typeof(byte));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteBalanceIndividualPorPeriodoCabecera_Result>("ReporteBalanceIndividualPorPeriodoCabecera", rutClienteParameter, periodoParameter, idCalidadParameter, idEstadoParameter, idTipoBalanceParameter);
        }
    
        public virtual ObjectResult<ReporteBalanceObtenerComentarios_Result> ReporteBalanceObtenerComentarios(string rutCliente, string periodo1, string periodo2, string periodo3, string periodo4, Nullable<byte> idCalidad, Nullable<byte> idEstado, Nullable<byte> idTipoBalance)
        {
            var rutClienteParameter = rutCliente != null ?
                new ObjectParameter("RutCliente", rutCliente) :
                new ObjectParameter("RutCliente", typeof(string));
    
            var periodo1Parameter = periodo1 != null ?
                new ObjectParameter("Periodo1", periodo1) :
                new ObjectParameter("Periodo1", typeof(string));
    
            var periodo2Parameter = periodo2 != null ?
                new ObjectParameter("Periodo2", periodo2) :
                new ObjectParameter("Periodo2", typeof(string));
    
            var periodo3Parameter = periodo3 != null ?
                new ObjectParameter("Periodo3", periodo3) :
                new ObjectParameter("Periodo3", typeof(string));
    
            var periodo4Parameter = periodo4 != null ?
                new ObjectParameter("Periodo4", periodo4) :
                new ObjectParameter("Periodo4", typeof(string));
    
            var idCalidadParameter = idCalidad.HasValue ?
                new ObjectParameter("IdCalidad", idCalidad) :
                new ObjectParameter("IdCalidad", typeof(byte));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            var idTipoBalanceParameter = idTipoBalance.HasValue ?
                new ObjectParameter("IdTipoBalance", idTipoBalance) :
                new ObjectParameter("IdTipoBalance", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteBalanceObtenerComentarios_Result>("ReporteBalanceObtenerComentarios", rutClienteParameter, periodo1Parameter, periodo2Parameter, periodo3Parameter, periodo4Parameter, idCalidadParameter, idEstadoParameter, idTipoBalanceParameter);
        }
    }
}
